Revision: 40bb6ad0ef0a674d3ac06596c3c21894d3bd3fd4
Patch-set: 4
File: services/audioflinger/Android.mk

96
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_deb6d989
Bytes: 67
This test program will not link correctly without the new .cpp file

File: services/audioflinger/AudioResampler.cpp

270
Wed Jul 31 00:28:13 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 138a339d_3c61880f
Bytes: 8
not done

File: services/audioflinger/AudioResamplerBeats.cpp

35
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_890fc9eb
Bytes: 111
Shouldn't this be within #if(def) ?  Also, see cover comment about performance of intrinsics vs. other options.

64
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_feb0f5f6
Bytes: 265
In C and C++ (but unlike Java), these are not arrays of pointers to arrays of int16_t.  They are actually stored in memory as arrays of int16_t, but with some extra syntactic sugar for indexing provided by the compiler.  So see note below about mppFilterTaps_int16.

1334
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_fe22b56a
Bytes: 91
For C++ code such as this, we use "for (int i...".  For C code, we use "int i;\nfor (i...".

1347
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_49dcd12b
Bytes: 80
Code such as this often gives better results than intrinsics; see cover comment.

1376
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_89e6e9f9
Bytes: 68
See cover comment about performance of intrinsics vs. other options.

1453
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_9ecaa162
Bytes: 222
Since these don't vary per instance, move to static const ... = ... in the .h

The magic constants will be clearer if they are expressed as expressions, e.g. replace "= 2560;" by "= 160 * 16" etc. (see line 51 to 58 of .h)

1473
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_5e97293e
Bytes: 363
Given comment at line 64, mppFilterTaps_int16 should be changed to const int16_t*, and then this cast "(const int16_t**)" can be removed. So this can be "mppFilterTaps_int16 = &h_LOW_QUALITY_44_to_48_int16[0][0];"

This will also fix the build warnings such as these:
warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]

1538
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_fe571527
Bytes: 59
move up to constructor initialization list: ", mPpState(0)"

1546
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_be859dca
Bytes: 686
http://linux.die.net/man/3/memalign states:

POSIX requires that memory obtained from posix_memalign() can be freed using free(3). Some systems provide no way to reclaim memory allocated with memalign() or valloc() (because one can only pass to free(3) a pointer gotten from malloc(3), while, for example, memalign() would call malloc(3) and then align the obtained value). The glibc implementation allows memory obtained from any of these functions to be reclaimed with free(3).

Android uses bionic C runtime library, not glibc, so I'm not sure whether it is safe to use free with return value of memalign. Please confirm that bionic is similar to glibc. See $ANDROID_BUILD_TOP/bionic

File: services/audioflinger/AudioResamplerBeats.h

27
Wed Jul 31 00:28:13 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 138a339d_f7ebbb28
Bytes: 8
not done

34
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_9ee461cb
Bytes: 90
indent, or since the previous line is short, you could instead merge it with previous line

36
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_1ed211f1
Bytes: 38
we add "virtual" in front for emphasis

42
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_becf5d71
Bytes: 130
If these don't vary per instance, then use "static const ... = ... ;" 

See comment at .cpp where these are currently initialized.

61
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_de5b395e
Bytes: 280
To emphasize that these don't change after construction, we use "const int mUpFactor;" and similarly for mDnFactor, which then requires changing the constructor to read ": AudioResampler(...), mUpFactor(sampleRate == 48000 ? 160 : 147), mDnFactor(sampleRate == 48000 ? 147 : 160)"

63
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_7e6dc5fe
Bytes: 57
Similar const, but more difficult, so let's skip for now.

64
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_5ee9e9cb
Bytes: 83
const int16_t* not **

see note at declaration and initialization of arrays in .cpp

67
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_deb7b9cc
Bytes: 38
we add "virtual" in front for emphasis

75
Thu Aug 01 17:25:19 2013 +0000
Author: Glenn Kasten <1004395@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3741b7d_1e00517d
Bytes: 29
See above; no need for struct

