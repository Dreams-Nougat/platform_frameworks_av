Revision: 48299685b6d77db9e37aee99f5c9857b95588249
Patch-set: 2
File: /COMMIT_MSG

14:0-15:1
Wed Jul 01 06:03:36 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f3bdd1e6_f78fa083
Bytes: 80
Before the Change-Id: can you please put on its own line

Bug: 17722767

Thanks!

File: media/libstagefright/codecs/m4v_h263/dec/test/m4v_h263_dec_test.cpp

39:4-39:51
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3760d12_466b726b
Bytes: 23
prefer to compute this.

39:4-39:51
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d3760d12_466b726b
UUID: 18f28255_03c81096
Bytes: 4
Done

49:4-49:26
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b3da7933_1d5293e2
Bytes: 52
should this be set only if the return value is true?

49:4-49:26
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b3da7933_1d5293e2
UUID: 1840c241_705330e8
Bytes: 4
Done

52:4-52:37
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f3d8713c_3f6667a4
Bytes: 61
would it be more efficient to read a block of data at a time?

58:4-58:43
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 33cf6974_c17a029a
Bytes: 92
why read into nextBytes and do a copy from nextBytes into buf?  just read directly into buf.

58:4-58:43
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 33cf6974_c17a029a
UUID: d829ca86_4e9d3340
Bytes: 245
Prefer to leave it as is. I have tried to make the code easily understandable rather than fast. The test harness code, even without usual optimizations, will still take far less time than the actual decoding itself. So I guess it should be fine.

81:0-84:43
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3dfed21_3e6669a4
Bytes: 53
maybe do a uint32 compare, and shift the new byte in?

81:0-84:43
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d3dfed21_3e6669a4
UUID: d8fb8a32_dea8c564
Bytes: 50
Prefer to leave it as is. See the earlier comment.

98:5-98:26
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f3d8713c_7f70ef52
Bytes: 71
see the previous function for comments.  would be nice to combine them.

98:5-98:26
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f3d8713c_7f70ef52
UUID: 18f28255_e053e260
Bytes: 50
Prefer to leave it as is. See the earlier comment.

123:12-123:41
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f3d8713c_9f74d347
Bytes: 17
this isn't valid.

123:12-123:41
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f3d8713c_9f74d347
UUID: d8fb8a32_beb5f9ba
Bytes: 4
Done

168:43-168:60
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b3da7933_3d574fd3
Bytes: 21
can this be computed?

168:43-168:60
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b3da7933_3d574fd3
UUID: 18f28255_c3d10842
Bytes: 4
Done

182:15-182:27
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b3da7933_5d4c1b47
Bytes: 93
doesn't free resources; actually there is inconsistent freeing below when exiting on failure.

182:15-182:27
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b3da7933_5d4c1b47
UUID: d829ca86_eeabbf5e
Bytes: 4
Done

267:12-267:18
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 13d6e50c_800c7647
Bytes: 22
retVal = EXIT_FAILURE?

267:12-267:18
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 13d6e50c_800c7647
UUID: d829ca86_6e810fd8
Bytes: 94
This allows test to handle streams with corrupt bitstream. Hence retval is not set to failure.

270:29-270:51
Wed Jul 01 06:02:44 2015 +0000
Author: Andy Hung <1040213@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f3d8713c_ff7b1f32
Bytes: 69
make this a loop constant of outputBufferSize, perhaps near line 168?

270:29-270:51
Tue Jul 07 11:31:11 2015 +0000
Author: Ashok Bhat <1074037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f3d8713c_ff7b1f32
UUID: f8f4ce42_7f6acf99
Bytes: 4
Done

